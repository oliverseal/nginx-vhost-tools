#!/usr/bin/env ruby
#
# Creates a new site config for nginx
# 
# Uses a template file to create the config, and fills in 
# "variables" with commmand line arguments to this script.
# 
# Created by Caius Durling on 2010-05-12
# MIT License - see readme.md
# 
# Exit codes:
#   0: everything went ok
#   1: --name argument missing
#   2: config file already exists
#   3: template file not found
# 

require "optparse"
require "ostruct"

DEFAULT_NGINX_ROOT = "/etc/nginx"
PHP_CONFIG = "include php_config;"

@opts = OpenStruct.new

# Set the defaults here
@opts.template_path = "#{DEFAULT_NGINX_ROOT}/templates/unicorn.conf"
@opts.user          = ENV["USER"]
@opts.enable_php    = false
@opts.overwrite     = false

OptionParser.new do |o|
  o.banner = "USAGE: ngnew [options]"
  
  o.separator ""
  o.separator "Specific options:"

  o.on("-n", "--name NAME", "Domain name") do |name|
    @opts.name = name
  end

  o.on("-u", "--user [USER]", "Username where webroot resides") do |user|
    @opts.user = user
  end

  o.on("-r", "--root [ROOT]", "Path to site root") do |root|
    @opts.root = root
  end

  o.on("-s", "--socket [ROOT]", "Path to site socket") do |socket|
    @opts.socket = socket
  end

  o.on("-t", "--template [FILE]", "File to read template config from") do |template|
    @opts.template_path = template
  end

  o.on("-f", "--file [FILE]", "File to write config into") do |config_file|
    @opts.config_path = config_file
  end

  o.on("--enable-php", "Enable PHP in the vhost") do |php|
    @opts.enable_php = true
  end

  o.on("--force", "Overwrite existing config file") do |force|
    @opts.overwrite = true
  end

end.parse!(ARGV)

unless @opts.name
  puts "Required domain name is missing!"
  puts "See --help for usage"
  exit 1
end

# And now we work some stuff out with the options we've been given
@opts.config_path ||= "#{DEFAULT_NGINX_ROOT}/sites-available/#{@opts.name}"

template_file = File.expand_path(@opts.template_path)
unless File.exists?(template_file)
  puts "ERROR: Can't find the template file: #{template_file}"
  exit 3
end

config_file = File.expand_path(@opts.config_path)
if File.exists?(config_file) && !@opts.overwrite
  puts "ERROR: #{config_file} already exists."
  puts "Pass --force to overwrite it."
  exit 2
end

File.open(File.expand_path(@opts.config_path), "w") do |f|
  # Read in template file
  File.open(File.expand_path(@opts.template_path), "r").each_line do |line|
    line ||= ""
    # Replace the variables we can
    line.gsub!("%USER%", @opts.user)
    line.gsub!("%NAME%", @opts.name)
    if @opts.socket
    	line.gsub!("%SOCKET%", @opts.socket)
    else
    	line.gsub!("%SOCKET%", @opts.root + '/sockets/' + @opts.name)
    end
    line.gsub!("%NAME_AS_VAR%", @opts.name.gsub(/\W|\D/, ''))
    line.gsub!("%ROOT%", @opts.root)
    # Either strip our php variable, or fill it if we're enabling php
    next if line[/%PHP_CONFIG%/] && !@opts.enable_php
    line.gsub!("%PHP_CONFIG%", PHP_CONFIG)

    # Write file out to config
    f.puts line
  end
end

puts "Wrote the config for #{@opts.name} to #{config_file} successfully!"
